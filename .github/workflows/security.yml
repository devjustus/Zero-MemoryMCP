name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Dependency audit
  audit:
    name: Dependency Audit
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      
      - name: Run cargo audit
        run: cargo audit --deny warnings
      
      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-results
          path: audit-results.txt

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  # Supply chain security
  supply-chain:
    name: Supply Chain Security
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      
      - name: Check dependencies
        run: |
          cargo deny check bans
          cargo deny check licenses
          cargo deny check sources
          cargo deny check advisories

  # SAST - Static Application Security Testing
  sast:
    name: Static Security Analysis
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-geiger
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-geiger
      
      - name: Check unsafe code usage
        run: cargo geiger --all-features
      
      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: sast-results.txt

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'rust'
          queries: security-and-quality
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build
        run: cargo build --release
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # Memory safety check
  memory-safety:
    name: Memory Safety Check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri
      
      - name: Run Miri
        run: |
          cargo +nightly miri setup
          cargo +nightly miri test
        env:
          MIRIFLAGS: "-Zmiri-disable-isolation"
      
      - name: Upload Miri results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: miri-results
          path: miri-results.txt